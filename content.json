{"pages":[],"posts":[{"title":"实验室情况介绍","text":"从零到 301 —— 计科大数据实验室招新啦 计科大数据实验室全名为「计算机科学与技术大数据实验室」，位于重庆理工大学花溪校区第一实验楼 B301 室。在这里，有舒服的学习环境，有活跃的研究氛围，还有学长学姐的给力助攻，以及强大的硬件支持。计算机科学与技术专业是我们学校计算机学院的唯一一个的国家级特色专业，本实验室招收仅限于计算机科学与技术专业的学生，欢迎学弟学妹加入我们。 研究方向机器学习、数据挖掘、自然语言处理、数字图像处理等一切新兴领域。 主要活动实验室的主要活动包括： 机器学习相关项目开发 每周机器学习技术分享会谈 Seminar 组队参加国内外大数据竞赛，如 Kaggle、天池等 实验室福利（重点来了） 各种工作介绍和内推 考研经验传授分享 各种学习书籍随意翻阅 学长学姐带飞做比赛项目 近期成果 新闻标题短文本分类 知乎问题多标签分类 单文档摘要自动生成系统 微博情感分析 大学生贴吧舆情分析 个性化定制与推荐旅游路线系统 程序设计基础课程在线考试系统 体育新闻摘要自动生成系统 群聊文本用户个性分析系统 电影推荐自动生成算法 各种预测分析算法 14 级学长学姐去向张浩：现被录取为重庆邮电大学计算机专业研究生，京东大数据比赛 Top 30，入围京东人才库。 黄媛：现被录取为重庆邮电大学计算机学术研究生。 聂尧：全栈工程师，擅长前端和后端技术开发。 丁汉洋：实习于小库科技，现已获得澳门科技大学研究生全额奖学金。 冉孟元：现被录取为重庆大学软件工程学术研究生。 陈鹏：现就职于重庆新华日报。 目前实验室成员名单陈国栋、丁玉婷、冯松、刘鑫、秦贵双、王俊杰、伍梓樟、陈景翔、胡稳、俞桦翀等。 联系方式QQ群号：780087452（2017 计科大数据招新群）","link":"/2018/06/07/实验室情况介绍/"},{"title":"PyQt5 and QT 5 tutorial","text":"当前主流跨平台 GUI 对比 GUI 框架 语言 当前版本 软件周期 入门难易 文档完善程度 社区讨论资源 定制化 缺点 Swing Java Java SE 8 1996-2014 一般 还行 一般 难 古老 JavaFX Java Java FX 9 2008-2014 一般 很好 很多 一般 JDK 11+ 将不会内置 Tkinter Python Tcl/Tk 8.6 1999- 简单 很好 很多 较差 只适合写一些简单的界面 PyQt4 Python Qt 4.8 2012-2017 难 极佳 一般 很好 不再更新 PyQt5 Python Qt 5.11 2016- 难 极佳 较少 很好 难上手、难打包、打包体积稍大 Electron JavaScript electron v2.0.2 2013- 简单 很好 很多 很好 占用内存大、打包体积大、开发栈更新快 综上所述，我最终选择了 PyQt5 作为主力跨平台 GUI 开发语言。PyQt5 可以借助 Qt Designer 软件实现可视化（拖拽）编写界面，十分方便。但是它却有十分致命的缺点：上手难，其原因主要在于 PyQt5 的文档假定用户具备学习过 C++ 以及 Qt 5 的经验。所以在此，我分享一下自己的学习路线，以及我在社区为数不多的资料里提取出的精华，供大家参考。 初见 - Hello, world本小节列举了这两种方式实现 PyQt5 Hello, World 程序的编写，本人推荐你都体验一下，比较一下异同。 纯 Python 代码实现纯 Python 代码比较暴力直接，直接运行下面这种代码即可： 12345678910111213#!/usr/bin/python3# -*- coding: utf-8 -*-import sysfrom PyQt5.QtWidgets import QApplication, QWidgetif __name__ == '__main__': app = QApplication(sys.argv) window = QWidget() window.resize(250, 150) window.move(300, 300) window.setWindowTitle('Simple') window.show() sys.exit(app.exec_()) 为了你能更好地理解「怎样使用纯 Python 代码写出界面」，我强烈推荐你阅读 PyQt5 中文教程 的前四个章节，这个教程的后几个章节我们会在本篇文章的后面讲到，所以你大可不必担心。 借助 Qt Designer 可视化 UI 生成工具在你阅读完\b上面那个教程的 布局管理 章节后 ，\b你应该使用 Qt Designer 画出界面，然后通过 Python 代码调用 *.ui 文件，渲染界面，然后比较两种方法的差异。 通过 Python 代码调用 *.ui 文件有两种方式，一种是通过 PyQt5.uic.loadUi 模块，直接加载 *.ui 文件，如以下代码所示： 123456789101112131415161718192021#!/usr/bin/python3# -*- coding: utf-8 -*-import sysfrom PyQt5.uic import loadUifrom PyQt5.QtWidgets import QApplication, QMainWindowclass ApplicationWindow(QMainWindow): def __init__(self): super(ApplicationWindow, self).__init__() loadUi('mainWindow.ui', self) # 改成你的 *.ui 文件名if __name__ == '__main__': app = QApplication(sys.argv) window = ApplicationWindow() window.show() sys.exit(app.exec_()) 需要注意的是，该代码假定你的 Python 代码和你的 *.ui 文件位于同一文件夹下面。如果你的 *.ui 文件位于其他位置，你需要自行修改函数 loadUi 的参数。 第二是通过 pyuic 工具，先把 *.ui 文件转换成 *.py 文件，然后直接在 Python 代码中导入该模块，非常地有意思。 1234567891011121314151617181920212223#!/usr/bin/python3# -*- coding: utf-8 -*-import sysfrom PyQt5.QtWidgets import QApplication, QMainWindowfrom mainWindow import Ui_MainWindow # 把 mainWindow 改成你的 *.py 文件名class ApplicationWindow(QMainWindow): def __init__(self): super(ApplicationWindow, self).__init__() self.ui = Ui_MainWindow() self.ui.setupUi(self)if __name__ == '__main__': app = QApplication(sys.argv) window = ApplicationWindow() window.show() sys.exit(app.exec_()) 怎么样把 Qt Desinger 生成的 *.ui 文件转换成 *.py 文件呢，你可以使用一个工具，叫做 pyuic，你可以在 *.ui 位于的当前文件夹下，直接使用命令 pyuic5 -x file-name.ui -o file-name.py 转换。如果你用的是 PyQt4，不要忘记把命令中的 pyuic5 改为 pyuic4；如果你用了虚拟环境，那么 pyuic5 的路径大概会在 ./venv/bin 下，命令则可以变为 ./venv/bin/pyuic5 file-name.ui -o file-name.py；如果你用的是 Windows 而且 pyuic 的路径并不在你系统的环境变量中，你可能得自行查找 pyuic 的路径，那么命令可能看上去更像是这样 C:\\Python36\\Lib\\site-packages\\PyQt5\\pyuic5.bat -x file-name.ui -o file-name.py，而大多数人的做法是把这个 pyuic5.bat 文件拷贝到当前项目根目录中，这样就可以直接通过最初的那条命令 pyuic5.bat -x file-name.ui -o file-name.py 使用\b，或是通过 python -m PyQt5.uic.pyuic -x file-name.ui -o file-name.py 来转换呢。 你\b可能会觉得，在每次修改了 *.ui 文件之后，都需要重新编译运行一下 pyuic 命令，非常麻烦。这里有个关于 PyCharm IDE 的小技巧，可以在你允许 Python 程序之前，自动调用 pyuic 命令更新 *.py 文件。 此处应该有图 可能大家会问，既然 loadUi 那么方便，为什么还要使用 pyuic 呢？根据我个人的理解和经验，我认为主要有\b几点值得深思： 通过 pyuic 转换得到的 *.py 文件更容易阅读和理解，便于发现错误并改进 *.ui 文件。 在打包发布时，*.ui 文件可能无法混淆，容易被人破解，被\b其他人篡改，修改界面布局，而 *.py 文件可以进行更深层次的混淆，\b很难被破解，更加安全。 番外：如何安装 Qt DesingerPS：Qt Desinger 的安装又是另外一个话题了，本文简单地提一下的它的安装吧！ 对于 macOS 操作系统可以通过 Homebrew 安装，命令是 brew install qt，然后你可以打开文件夹 /usr/local/Cellar/qt/your-qt-verison/libexec/Desiger.app，其中 your-qt-version 应该替换成你的 Qt 版本号，笔者使用的是 5.11.0。 对于 Windows 用户，则可以从 官方下载页面 上直接下载，一路安装即可，网速不好的话，也可以在官网上找到 离线安装包，在此不再赘述。有意思的是，你从 官网 上点击下载的时候有一定概率会让你注册，而通过我上面给的两个下载页面却不会要求注册权限。 再遇 - Signals and SlotsSignals and Slots 常常被人翻译为「信号和槽机制」，我觉得这种翻译机制很容易把新人搞懵逼，这几个名词我还是不翻译好了，\b\b让我们这个吧： Sender 发送者：负责发送 Signals 信号 Receiver 接受者：负责接受 Signals 信号 S\blots：对信号作出的反应 为了你能更好地理解「Signals and Slots」，我强烈推荐你阅读 PyQt5 中文教程 的 事件和信号 这个章节，认真阅读\b示例「拖动滑块改变数字」，研读其代码。 在看完了上面那个链接的内容后，我相信你对 Signals and Slots \b已经有了自己的理解，我在这里简单地讲一下，如何通过 Qt Designer 绑定信号和事件，这一部分的资料确实有点少。 这里应该有图 Layout：Qt Designer 之 有意思的布局带滚动条的图片展示有时候一张图片太大了，我们必须\b为其安置一个滚动，那么在 Qt Designer 里面该如何操作\b\b呢？ 本小节列举了这两种方式实现 Hello, World 程序的编写，本人推荐你都体验一下，比较一下异同。 DIY：定制你的专属控件本小节待填坑。 参考资料 PyQt5 中文教程 通俗易懂，简洁明了，有广度而不失深度。 Qt Documentation Qt 5 \b官方文档，C++ 语言描述，具备极高的参考价值。 baoboa/pyqt5 - examples PyQt5 代码示例，由于大多数代码较为复杂，所以参考价值一般。","link":"/2018/06/04/PyQt5 and Qt Designer tutorial/"}],"tags":[],"categories":[]}