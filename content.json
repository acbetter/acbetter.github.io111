{"pages":[{"title":"关于 AC Better","text":"AC Better，一直坚信 Newer is Better，沉迷使用各种语言写出 Hello, World 并且无法自拔。懒癌晚期，常年摸鱼。目前在研究机器学习等内容，备战考研中，勿催更。就是这样。","link":"/about/index.html"}],"posts":[{"title":"人生有梦 各自精彩","text":"祝愿我们都有美好的未来。","link":"/2017/07/13/人生有梦 各自精彩/"},{"title":"实验室情况介绍","text":"介绍一下我们实验室～ 从零到 301 —— 计科大数据实验室招新啦 计科大数据实验室全名为「计算机科学与技术大数据实验室」，位于重庆理工大学花溪校区第一实验楼 B301 室。在这里，有舒服的学习环境，有活跃的研究氛围，还有学长学姐的给力助攻，以及强大的硬件支持。本实验室成立于 2015 年，由黄贤英教授领衔，曹琼老师组织建立。 计算机科学与技术专业是我们学校计算机学院的唯一一个国家级特色专业，本实验室仅限于招收计算机科学与技术专业的学生。欢迎学弟学妹加入我们！ 研究方向机器学习、数据挖掘、自然语言处理、数字图像处理等一切新兴领域。 主要活动实验室的主要活动包括： 机器学习相关项目开发 每周机器学习技术分享会谈 Seminar 组队参加国内外大数据竞赛，如 Kaggle、天池等 实验室福利（重点来了） 各种工作介绍和内推 考研经验传授分享 各种学习书籍随意翻阅 学长学姐带飞做比赛项目 近期成果 新闻标题短文本分类 知乎问题多标签分类 单文档摘要自动生成系统 微博情感分析 大学生贴吧舆情分析 个性化定制与推荐旅游路线系统 程序设计基础课程在线考试系统 体育新闻摘要自动生成系统 群聊文本用户个性分析系统 电影推荐自动生成算法 各种预测分析算法 14 级学长学姐去向张浩：现被录取为重庆邮电大学计算机专业研究生，京东大数据比赛 Top 30，入围京东人才库。 黄媛：现被录取为重庆邮电大学计算机学术研究生。 聂尧：全栈工程师，擅长前端和后端技术开发。 丁汉洋：实习于小库科技，现已获得澳门科技大学研究生全额奖学金。 冉孟元：现被录取为重庆大学软件工程学术研究生。 陈鹏：现就职于重庆新华日报。 目前实验室成员名单陈国栋、丁玉婷、冯松、刘鑫、秦贵双、王俊杰、伍梓樟、陈景翔、胡稳、俞桦翀等。 联系方式QQ群号：780087452（2017 计科大数据招新群）","link":"/2018/06/07/实验室情况介绍/"},{"title":"PyQt5 and Qt Designer 混合编程教程","text":"对比了几大跨平台 GUI 框架之后，我选择使用 PyQt5 作为主要开发工具。然而，能被找到的教程太少太少了，尤其是关于 PyQt5 和 Qt Designer 一起使用的，所以我自己写了一份教程，由浅入深，供大家参考。 当前主流跨平台 GUI 对比 GUI 框架 语言 当前版本 软件周期 入门难易 文档完善程度 社区讨论资源 定制化 缺点 Swing Java Java SE 8 1996-2014 一般 还行 一般 难 古老 JavaFX Java Java FX 9 2008-2014 一般 很好 很多 一般 JDK 11+ 将不会内置 Tkinter Python Tcl/Tk 8.6 1999- 简单 很好 很多 较差 只适合写一些简单的界面 PyQt4 Python Qt 4.8 2012-2017 难 极佳 一般 很好 不再更新 PyQt5 Python Qt 5.11 2016- 难 极佳 较少 很好 难上手、难打包、打包体积稍大 Electron JavaScript electron v2.0.2 2013- 简单 很好 很多 很好 占用内存大、打包体积大、开发栈更新快 综上所述，我最终选择了 PyQt5 作为主力跨平台 GUI 开发语言。PyQt5 可以借助 Qt Designer 软件实现可视化（拖拽）编写界面，十分方便。但是它却有十分致命的缺点：上手难，其原因主要在于 PyQt5 的文档假定用户具备学习过 C++ 以及 Qt 5 的经验。所以在此，我分享一下自己的学习路线，以及我在社区为数不多的资料里提取出的精华，供大家参考。 初见 - Hello, world本小节列举了这两种方式实现 PyQt5 Hello, World 程序的编写，本人推荐你都体验一下，比较一下异同。 纯 Python 代码实现纯 Python 代码比较暴力直接，直接运行下面这种代码即可： 12345678910111213#!/usr/bin/python3# -*- coding: utf-8 -*-import sysfrom PyQt5.QtWidgets import QApplication, QWidgetif __name__ == '__main__': app = QApplication(sys.argv) window = QWidget() window.resize(250, 150) window.move(300, 300) window.setWindowTitle('Simple') window.show() sys.exit(app.exec_()) 为了你能更好地理解「怎样使用纯 Python 代码写出界面」，我强烈推荐你阅读 PyQt5 中文教程 的前四个章节，这个教程的后几个章节我们会在本篇文章的后面讲到，所以你大可不必担心。 借助 Qt Designer 可视化 UI 生成工具在你阅读完\b上面那个教程的 布局管理 章节后，你应该使用 Qt Designer 画出界面，然后通过 Python 代码调用 *.ui 文件，渲染界面，然后比较两种方法的差异。 通过 Python 代码调用 *.ui 文件有两种方式，一种是通过 PyQt5.uic.loadUi 模块，直接加载 *.ui 文件，如以下代码所示： 123456789101112131415161718192021#!/usr/bin/python3# -*- coding: utf-8 -*-import sysfrom PyQt5.uic import loadUifrom PyQt5.QtWidgets import QApplication, QMainWindowclass ApplicationWindow(QMainWindow): def __init__(self): super(ApplicationWindow, self).__init__() loadUi('mainWindow.ui', self) # 改成你的 *.ui 文件名if __name__ == '__main__': app = QApplication(sys.argv) window = ApplicationWindow() window.show() sys.exit(app.exec_()) 需要注意的是，该代码假定你的 Python 代码和你的 *.ui 文件位于同一文件夹下面。如果你的 *.ui 文件位于其他位置，你需要自行修改函数 loadUi 的参数。 第二是通过 pyuic 工具，先把 *.ui 文件转换成 *.py 文件，然后直接在 Python 代码中导入该模块，非常地有意思。 1234567891011121314151617181920212223#!/usr/bin/python3# -*- coding: utf-8 -*-import sysfrom PyQt5.QtWidgets import QApplication, QMainWindowfrom mainWindow import Ui_MainWindow # 把 mainWindow 改成你的 *.py 文件名class ApplicationWindow(QMainWindow): def __init__(self): super(ApplicationWindow, self).__init__() self.ui = Ui_MainWindow() self.ui.setupUi(self)if __name__ == '__main__': app = QApplication(sys.argv) window = ApplicationWindow() window.show() sys.exit(app.exec_()) 怎么样把 Qt Desinger 生成的 *.ui 文件转换成 *.py 文件呢，你可以使用一个工具，叫做 pyuic，你可以在 *.ui 位于的当前文件夹下，直接使用命令 pyuic5 -x file-name.ui -o file-name.py 转换。如果你用的是 PyQt4，不要忘记把命令中的 pyuic5 改为 pyuic4；如果你用了虚拟环境，那么 pyuic5 的路径大概会在 ./venv/bin 下，命令则可以变为 ./venv/bin/pyuic5 file-name.ui -o file-name.py；如果你用的是 Windows 而且 pyuic 的路径并不在你系统的环境变量中，你可能得自行查找 pyuic 的路径，那么命令可能看上去更像是这样 C:\\Python36\\Lib\\site-packages\\PyQt5\\pyuic5.bat -x file-name.ui -o file-name.py，而大多数人的做法是把这个 pyuic5.bat 文件拷贝到当前项目根目录中，这样就可以直接通过最初的那条命令 pyuic5.bat -x file-name.ui -o file-name.py 使用，或是通过 python -m PyQt5.uic.pyuic -x file-name.ui -o file-name.py 来转换呢。 你可能会觉得，在每次修改了 *.ui 文件之后，都需要重新编译运行一下 pyuic 命令，非常麻烦。这里有个关于 PyCharm IDE 的小技巧，可以在你允许 Python 程序之前，自动调用 pyuic 命令更新 *.py 文件。 如图所示，我们在选中了 Run External tool 之后，点击弹出框左下角的那个加号，添加这个 Tool 进去。 在按照上图编写好自定义工具后，我们先点击上图右下角的 OK 按钮，选中刚才编辑好的 Tool，再点击 OK，这样就大功告成了！每次运行程序的时候，PyCharm 会自动转换文件。当然，如果你用的是虚拟环境或者其他的，你需要把上图标号为 2 的部分改成你的 pyuic5 所在目录，比如 venv/bin/pyuic5。 可能大家会问，既然 loadUi 那么方便，为什么还要使用 pyuic 呢？根据我个人的理解和经验，我认为主要有以下\b几点： 通过 pyuic 转换得到的 *.py 文件更容易阅读和理解，便于发现错误并改进 *.ui 文件。 在打包发布时，*.ui 文件可能无法混淆，容易被人破解，被\b其他人篡改，修改界面布局，而 *.py 文件可以进行更深层次的混淆，很难被破解，更加安全。 如果想要使用 Qt 资源管理器传入图标等资源，*.ui 文件会避免某个 Bug 的产生。 番外：如何安装 Qt DesingerPS：Qt Desinger 的安装又是另外一个话题了，本文简单地提一下的它的安装吧！ 对于 macOS 操作系统可以通过 Homebrew 安装，命令是 brew install qt，然后你可以打开文件夹 /usr/local/Cellar/qt/your-qt-verison/libexec/Desiger.app，其中 your-qt-version 应该替换成你的 Qt 版本号，笔者使用的是 5.11.0。 对于 Windows 用户，则可以从 官方下载页面 上直接下载，一路安装即可，网速不好的话，也可以在官网上找到 离线安装包，在此不再赘述。有意思的是，你从 官网 上点击下载的时候有一定概率会让你注册，而通过我上面给的两个下载页面却不会要求注册权限。 再遇 - Signals and SlotsSignals and Slots 常常被人翻译为「信号和槽机制」，我觉得这种翻译机制很容易把新人搞懵逼，这几个名词我还是不翻译好了，让我们这个吧： Sender 发送者：负责发送 Signals 信号 Receiver 接受者：负责接受 Signals 信号 Slots：对信号作出的反应 为了你能更好地理解「Signals and Slots」，我强烈推荐你阅读 PyQt5 中文教程 的 事件和信号 这个章节，认真阅读示例「拖动滑块改变数字」，研读其代码。 在看完了上面那个链接的内容后，我相信你对 Signals and Slots 已经有了自己的理解，我在这里简单地讲一下，如何通过 Qt Designer 绑定信号和事件，这一部分的资料确实有点少。 这里应该有图 Layout：Qt Designer 之 有意思的布局带滚动条的图片展示有时候一张图片太大了，我们必须为其安置一个滚动，那么在 Qt Designer 里面该如何操作呢？ 本小节列举了这两种方式实现 Hello, World 程序的编写，本人推荐你都体验一下，比较一下异同。 DIY：定制你的专属控件 本小节待填坑。 参考资料 PyQt5 中文教程 通俗易懂，简洁明了，有广度而不失深度。 Qt Documentation Qt 5 官方文档，C++ 语言描述，具备极高的参考价值。 baoboa/pyqt5 - examples PyQt5 代码示例，由于大多数代码较为复杂，所以参考价值一般。","link":"/2018/06/04/PyQt5 and Qt Designer 混合编程教程/"},{"title":"如何动手打造属于自己的 ANKI 牌组（编程向）之牛津基本三千词","text":"自己制作的 Anki 牌组，才是最适合自己的。 本文假定你会这些，包括但不仅限于： 爬虫知识：Python 及其各种库，如 Requests 、BeautifulSoup 等 前端知识：Html Css （JavaScript 可选） Anki知识：理解 Anki 原理，熟练使用 Anki 软件 除此以为，你可能还需要一些动手能力，并且能够熟读 Anki 文档 干货 为什么把干货写在最前面？因为大部分人不会看到本文最后，甚至就不会看到第二小节。这就是碎片化阅读时代的悲哀。浮躁～那些想看代码的，就看到最后吧；不想看代码的，看完干货就可以放下手机去刷卡了。 经验之谈： 适合自己的牌组才是最好的。我做出的牌组你不一定认为好，但是这牌组的确最适合我。在当今时代，每个人都应该有自己的工作流，也应该打造为自己量身定制牌组。 坚持。人们总是太贪婪了，背着自己碗里的牌组，却又被别人的牌组所吸引，生怕错过。在这个信息爆炸的时代，我们要一步一个脚印，坚持走自己的路，背属于自己的卡片。我相信你们总有这样的过程：看到别人发的资源，保存好。然后你真的会打开吗？即便是打开了，又全都吃透了？所以请你不要半途而废，你既然精挑细选，选择了你的牌组，你就要把它背完，坚持背完。不忘初心，方得始终。 面对他人的质疑，你要相信自己，并站出来勇敢面对，为自己打气，并认真思考他人的质疑。大家看到我这套牌组，肯定最想质疑我这些问题： 卡片内容过多，你有耐心看完吗？ 答：我当时也觉得卡片的内容是有点多，所以我转换了学习策略： 增加学习时间。每天使用至少早晨两个小时时间（这对于习惯使用大块时间学习，碎片化时间娱乐的我来说很正常） 第一次过卡片的时候详细过，掌握每一个用法。没错，每一个用法，因为我用的词典是牛津学习者词典，上面的用法每一条都很重要，对构建单词网络起到决定性作用。 复习的时候粗略地过。如果忘记，打回去再详细地过一遍。 过卡片的过程中随时调整进度和卡片内容。必要时对内容进行删减，节约时间以达到效率和内容的最大平衡点。 PS：我觉得大家之所以会有这个问题是因为我们对 Anki 这款软件的定位很不一样。Anki 是记忆软件，对我而言又是词典软件。我用 Anki 背词典，肯定要把词典里的内容全背完咯～但是背哪些部分，我会按情况和进度挑选出来的。毕竟，活学活用嘛～ 一个单词有多条音频，你真的会认真听吗？ 答：会啊。因为我不仅仅是为了背单词而背单词，我还有一个强烈的愿望——看美剧。由于美剧里面各种口音乱飞，所以我不仅要掌握标准美音，还要能听懂各种口音。当然，第一遍过的时候全听留个印象就好了。 你的野心很大啊。能成功背完吗？ 答：那些想要改变世界的人，往往都改变了世界或是差一点改变世界。而那些只想要混一份工资的人，往往连份工资都混不上。理想很丰满，现实的确很骨感，但是我愿意付出刷完牌组所需的代价。而你呢？请不要把你的懒惰移植到我的身上，因为我从不懒惰。 PS：而这份牛津三千只是我学习英语路上的一小步，我不仅在背三千词，而且还在从多个角度攻破英语瓶颈。我想告诉你：营造纯英文环境对学习英语至关重要。当你的手机、电脑、教材、书籍、甚至电视剧都是英文的时候，你不背单词，你不学英语？你活不下去的。 还在看基础3000的人，你觉得能看懂英英词典吗？能看懂英英词典的人，还要看3000吗？ 答：本词典源由于是牛津初学者简单词典，我确实能看懂，但是并不意味着我能看懂牛津英英词典啊，尴尬。可能我的英语水平处在一个比较尴尬的状态，牛津三千可能过了两千以上词。但是就差那么一千，让我拿不起牛津英英词典。 写在教程前面的话大家好，我是 acbetter，从小酷爱折腾，生命不息折腾不止。这不，最近又折腾上了 DIY Anki 牌组，乐此不彼。苦于网上大多数牌组都是使用傻瓜式软件一键生成的，使用编程生成牌组的教程少之可怜，所以我打算出一个伪教程，记录我使用编程 DIY Anki 牌组的过程。 注意：本教程并非详细教程，看完之后只能告诉你使用编程生成牌组的逻辑，方便你知道一步一步你都需要做什么，而不是让你照搬硬套。毕竟，八仙过海，各显神通嘛～ 为什么我要做牛津三千词？理由很简单，我选词典的时候最终选择了牛津英英词典，而牛津词典上绝大多数词的定义都是由这三千个词解释的。比如achieve的定义achieve something to succeed in reaching a particular goal, status, or standard, especially by making an effort for a long time其中的每一个词都出现在牛津三千里。所以我把牛津三千背完之后，就可以抛弃英汉词典，直接使用牛津英英词典了。你也可以选择适合自己的词典，毕竟，适合自己的才是最好的～ 想先看一眼效果？满足你！ 获得单词列表你要背哪些词呢？这是一个严肃的问题。我选择了牛津三千并谷歌搜索到了它的地址，由于词太多了，我懒得一条一条复制过来，就写了个爬虫爬下来，顺便也把单词释义的地址也爬下来，方便接下来获取单词释义、发音等信息。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869# a1_get_3000_words_list.pyimport requestsfrom bs4 import BeautifulSoup'''Ready to Get'''url_us = 'http://www.oxfordlearnersdictionaries.com/us/wordlist/american_english/oxford3000/Oxford3000_A-B/'url_uk = 'http://www.oxfordlearnersdictionaries.com/uk/wordlist/american_english/oxford3000/Oxford3000_A-B/'proxies = &#123;'http': 'http://127.0.0.1:1087', 'https': 'http://127.0.0.1:1087'&#125;cookies = &#123;'oup-cookie': 'true', 'JSESSIONID': '9A3D476A9725353A4CDDD5D5D0E1841B', '__qca': 'P0-918953595-1500593442598', 'dictionary': 'english', '_ga': 'GA1.2.448180626.1500593443', '_gid': 'GA1.2.928219780.1500593443' &#125;headers = &#123;'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/55.0.2883.95 Safari/537.36'&#125;'''Let's Start'''url = url_us # You can choose to use US or UK define and pronouncer = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers)soup = BeautifulSoup(r.text, \"html5lib\")print(soup.prettify())'''Get url_list'''url_list = [url]for tag in soup.find(id=\"entries-selector\").find_all('a'): print(tag['href']) url_list.extend([tag['href']])# url_list = ['http://xxxxx/oxford3000/Oxford3000_A-B/',# 'http://xxxxx/oxford3000/Oxford3000_C-D/',# 'http://xxxxx/oxford3000/Oxford3000_E-G/',# 'http://xxxxx/oxford3000/Oxford3000_H-K/',# 'http://xxxxx/oxford3000/Oxford3000_L-N/',# 'http://xxxxx/oxford3000/Oxford3000_O-P/',# 'http://xxxxx/oxford3000/Oxford3000_Q-R/',# 'http://xxxxx/oxford3000/Oxford3000_S/',# 'http://xxxxx/oxford3000/Oxford3000_T/',# 'http://xxxxx/oxford3000/Oxford3000_U-Z/']'''Get 3000 Words'''oxford_3000 = &#123;&#125;for i in url_list: url = i print(url) # url = 'http://xxxxx/oxford3000/Oxford3000_A-B/' r = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers) soup = BeautifulSoup(r.text, \"html5lib\") '''Get first page words for A-B or C-D''' for k in soup.find(id=\"entrylist1\").find_all('a'): oxford_3000[k.text] = k['href'] '''Get other pages words like: Oxford3000_A-B/?page=2''' for j in soup.find(id=\"paging\").find_all('a'): url = j['href'] print(url) # url = 'http://xxxxxx/oxford3000/Oxford3000_A-B/?page=2' r = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers) soup = BeautifulSoup(r.text, \"html5lib\") for k in soup.find(id=\"entrylist1\").find_all('a'): oxford_3000[k.text] = k['href']'''Print Words'''print(oxford_3000)print(len(oxford_3000))'''Save To File'''with open('oxford_3000_&lt;a&gt;.txt', 'w+') as file: for key, value in oxford_3000.items(): file.write(','.join([key, value])) file.write('\\n') 爬下来的文件前五行： 123456# oxford_3000_&lt;a&gt;.txta,http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1abandon,http://www.oxfordlearnersdictionaries.com/us/definition/american_english/abandon_1abandoned,http://www.oxfordlearnersdictionaries.com/us/definition/american_english/abandonedability,http://www.oxfordlearnersdictionaries.com/us/definition/american_english/ability_1able,http://www.oxfordlearnersdictionaries.com/us/definition/american_english/able 其中，左边是单词，右边是单词释义的链接。据我统计，这牛津三千居然有3202个词，强行增加我的记忆量，这不科学啊！ 先试着爬取一个单词的释义故技重施，就爬a这个词的释义吧，我们改一下url这个参数就行了： 1234567891011121314151617# a2_get_every_word_define.py - for the word 'a'import requestsfrom bs4 import BeautifulSoupurl = 'http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1' # 改这个proxies = &#123;'http': 'http://127.0.0.1:1087', 'https': 'http://127.0.0.1:1087'&#125;cookies = &#123;'oup-cookie': 'true', 'JSESSIONID': '9A3D476A9725353A4CDDD5D5D0E1841B', '__qca': 'P0-918953595-1500593442598', 'dictionary': 'english', '_ga': 'GA1.2.448180626.1500593443', '_gid': 'GA1.2.928219780.1500593443' &#125;headers = &#123;'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36'&#125;r = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers)soup = BeautifulSoup(r.text, \"html5lib\")print(soup.prettify()) 果然，全是乱七八糟的Html代码啊！我只想要单词释义那一部份！ 12345678910111213141516171819202122&lt;!-- 爬下来的大概长这样 QAQ --&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;&lt;html lang=\"en\" xml:lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head&gt; &lt;title&gt; a_1 indefinite article - Definition, pictures, pronunciation and usage notes | Oxford Advanced American Dictionary at OxfordLearnersDictionaries.com &lt;/title&gt; &lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/&gt; &lt;meta content=\"Definition of a_1 indefinite article in Oxford Advanced American Dictionary. Meaning, pronunciation, picture, example sentences, grammar, usage notes, synonyms and more.\" name=\"description\"/&gt; &lt;meta content=\"a_1 indefinite article, online dictionary, Oxford Advanced American Dictionary, a_1 definition, define a_1, definition of a_1, a_1 pronunciation, pronounce a_1, a_1 meaning, a_1 examples, a_1 synonyms, picture, a_1 grammar\" name=\"keywords\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/definition/american_english/a_1\" hreflang=\"en\" rel=\"alternate\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1\" hreflang=\"en-US\" rel=\"alternate\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1\" hreflang=\"en-MX\" rel=\"alternate\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1\" hreflang=\"en-PH\" rel=\"alternate\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1\" hreflang=\"en-BR\" rel=\"alternate\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1\" hreflang=\"en-CO\" rel=\"alternate\"/&gt; &lt;meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/&gt; &lt;meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/&gt; &lt;link href=\"http://www.oxfordlearnersdictionaries.com/us/external/styles/autocomplete.css?version=1.6.9\" rel=\"stylesheet\" type=\"text/css\"/&gt; &lt;script type=\"text/javascript\"&gt; var googletag = googletag || &#123;&#125;; googletag.cmd = googletag.cmd || []; 此时我就要安利谷歌浏览器大法好了，理论上讲使用Chromium内核的浏览器都可以像如下图这样进行操作： 记下 id 啊！记下 id 啊！记下 id 啊！ 行吧，这时候我们就要找这个 id 报仇了！在下面的文件新增一行： 12# a2_get_every_word_define.py - for the word 'a'print(soup.find(id='entryContent')) 哈哈，我找到你了，你原来长这样啊（单词释义的Html版： 123&lt;div class=\"oaad\" id=\"entryContent\"&gt; &lt;div class=\"entry\" dict=\"oaad\" id=\"a_1\" sum=\"1605\"&gt;&lt;ol class=\"h-g\" id=\"a_1__1\" psg=\"&#123;comments::a1_e_comment_2&#125;\"&gt;&lt;div class=\"top-container\"&gt;&lt;div class=\"top-g\" id=\"a_1__2\"&gt;&lt;div class=\"webtop-g\"&gt;&lt;a class=\"oxford3000\" href=\"http://www.oxfordlearnersdictionaries.com/us/wordlist/american_english/oxford3000/\"&gt; &lt;/a&gt;&lt;span class=\"z\"&gt; &lt;/span&gt;&lt;h2 class=\"h\"&gt;a&lt;/h2&gt;&lt;span class=\"z\"&gt; &lt;/span&gt;&lt;span class=\"pos\"&gt;indefinite article&lt;/span&gt;&lt;/div&gt;&lt;span class=\"pos-g\" id=\"a_1__4\"&gt;&lt;span class=\"pos\" id=\"a_1__5\"&gt;indefinite article&lt;/span&gt;&lt;/span&gt; &lt;div class=\"pron-gs ei-g\" eid=\"a_1__6\" source=\"OAAD\"&gt;&lt;span class=\"pron-g\" geo=\"n_am\" id=\"a_1__7\" trans=\"oaad\"&gt;&lt;span class=\"phon\" eid=\"a_1__8\"&gt;&lt;span class=\"name\"&gt;NAmE&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;span class=\"wrap\"&gt;/&lt;/span&gt;ə&lt;span class=\"wrap\"&gt;/&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;div class=\"sound audio_play_button pron-usonly icon-audio\" data-src-mp3=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron/a/a__/a__us/a__us_2_rr.mp3\" data-src-ogg=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron_ogg/a/a__/a__us/a__us_2_rr.ogg\" style=\"cursor: pointer\" title=\" pronunciation American\" valign=\"top\"&gt; &lt;/div&gt;&lt;/span&gt;&lt;span class=\"sep\"&gt;,&lt;/span&gt; &lt;span class=\"pron-g\" geo=\"n_am\" id=\"a_1__9\" trans=\"oaad\"&gt;&lt;span class=\"phon\" eid=\"a_1__10\"&gt;&lt;span class=\"name\"&gt;NAmE&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;span class=\"wrap\"&gt;/&lt;/span&gt;eɪ&lt;span class=\"wrap\"&gt;/&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;div class=\"sound audio_play_button pron-usonly icon-audio\" data-src-mp3=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron/a/a__/a__us/a__us_3_rr.mp3\" data-src-ogg=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron_ogg/a/a__/a__us/a__us_3_rr.ogg\" style=\"cursor: pointer\" title=\" pronunciation American\" valign=\"top\"&gt; &lt;/div&gt;&lt;/span&gt;&lt;/div&gt; &lt;span class=\"v-gs\" id=\"a_1__11\" type=\"vs\"&gt;&lt;span class=\"wrap\"&gt;(&lt;/span&gt;&lt;span class=\"prefix\"&gt;also&lt;/span&gt; &lt;span class=\"v-g\" id=\"a_1__12\"&gt;&lt;span class=\"v\"&gt;&lt;strong&gt;an&lt;/strong&gt;&lt;/span&gt; &lt;div class=\"pron-gs ei-g\" eid=\"a_1__14\" source=\"OAAD\"&gt;&lt;span class=\"pron-g\" geo=\"n_am\" id=\"a_1__15\" trans=\"oaad\"&gt;&lt;span class=\"phon\" eid=\"a_1__16\"&gt;&lt;span class=\"name\"&gt;NAmE&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;span class=\"wrap\"&gt;/&lt;/span&gt;ən&lt;span class=\"wrap\"&gt;/&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;div class=\"sound audio_play_button pron-usonly icon-audio\" data-src-mp3=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron/a/an_/an__u/an__us_1_rr.mp3\" data-src-ogg=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron_ogg/a/an_/an__u/an__us_1_rr.ogg\" style=\"cursor: pointer\" title=\" pronunciation American\" valign=\"top\"&gt; &lt;/div&gt;&lt;/span&gt;&lt;span class=\"sep\"&gt;,&lt;/span&gt; &lt;span class=\"pron-g\" geo=\"n_am\" id=\"a_1__17\" trans=\"oaad\"&gt;&lt;span class=\"phon\" eid=\"a_1__18\"&gt;&lt;span class=\"name\"&gt;NAmE&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;span class=\"wrap\"&gt;/&lt;/span&gt;æn&lt;span class=\"wrap\"&gt;/&lt;/span&gt;&lt;span class=\"separator\"&gt;/&lt;/span&gt;&lt;/span&gt;&lt;div class=\"sound audio_play_button pron-usonly icon-audio\" data-src-mp3=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron/a/an_/an__u/an__us_2_rr.mp3\" data-src-ogg=\"http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron_ogg/a/an_/an__u/an__us_2_rr.ogg\" style=\"cursor: pointer\" title=\" pronunciation American\" valign=\"top\"&gt; &lt;/div&gt;&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;span class=\"wrap\"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;div class=\"clear\"&gt;&lt;!-- 还有好多行我就省略了。。。 --&gt; 乱七八糟的，不过我还是隐隐约约看到了一些单词发音的链接，还有单词释义。不管怎么样，先把它放在 Anki 里看看这些Html代码放在卡片中的样子。 虽然我已经做好心理准备了，但是为什么，为什么（哭） 罢了，这也不是Html 的锅，我们先把每个单词的Html代码全爬下来吧～ 123456789101112131415161718192021222324252627282930313233343536373839404142434445# get_word_define.pyimport htmlminimport requestsfrom bs4 import BeautifulSoup# url = 'http://www.oxfordlearnersdictionaries.com/us/definition/american_english/a_1'proxies = &#123;'http': 'http://127.0.0.1:1087', 'https': 'http://127.0.0.1:1087'&#125;cookies = &#123;'oup-cookie': 'true', 'JSESSIONID': '9A3D476A9725353A4CDDD5D5D0E1841B', '__qca': 'P0-918953595-1500593442598', 'dictionary': 'english', '_ga': 'GA1.2.448180626.1500593443', '_gid': 'GA1.2.928219780.1500593443' &#125;headers = &#123;'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/55.0.2883.95 Safari/537.36'&#125;# read word listwith open('oxford_3000_&lt;a&gt;.txt', 'r') as file: oxford_3000 = file.readlines()print(oxford_3000[:5])print(len(oxford_3000))# start from last runtimetry: with open('oxford_3000_html.txt', 'r+', encoding='utf-8') as file: oxford_3000_html_finished = file.readlines() start = len(oxford_3000_html_finished)except FileNotFoundError: start = 0# for x in range(0, len(oxford_3000[:5])): # first five linesfor x in range(start, len(oxford_3000)): # from start to end word = oxford_3000[x].split(',')[0] url = oxford_3000[x].split(',')[1].replace('\\n', '') r = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers) soup = BeautifulSoup(r.text, \"html5lib\") # print(soup.prettify()) # print(soup.find(id='entryContent')) html = htmlmin.minify(str(soup.find(id='entryContent')).replace('\\n', ''), remove_empty_space=False, remove_optional_attribute_quotes=False) output = word + u'ㅋ' + html with open('oxford_3000_html.txt', 'a+', encoding='utf-8') as file: print(output) file.writelines(output + '\\n') 爬取到oxford_3000_html.txt即可。注意我们使用了htmlmin.minify方法压缩代码至一行。下面是文件的前五行： 123456# oxford_3000_html.txtaㅋ&lt;div class=\"oaad\" id=\"entryContent\"&gt;&lt;div class=\"entry\" dict=\"oaad\" id=\"a_1\" sum=\"1605\"&gt;abandonㅋ&lt;div class=\"oaad\" id=\"entryContent\"&gt;&lt;div class=\"entry\" dict=\"oaad\" id=\"abandon_1\" subentrynum=\"1\" sum=\"1210\"&gt;abandonedㅋ&lt;div class=\"oaad\" id=\"entryContent\"&gt;&lt;div class=\"entry\" dict=\"oaad\" id=\"abandoned\" psg=\"iskills:y\" sum=\"309\"&gt;abilityㅋ&lt;div class=\"oaad\" id=\"entryContent\"&gt;&lt;div class=\"entry\" dict=\"oaad\" id=\"ability_1\" sum=\"670\"&gt;ableㅋ&lt;div class=\"oaad\" id=\"entryContent\"&gt;&lt;div class=\"entry\" dict=\"oaad\" id=\"able\" sum=\"537\"&gt; ㅋ前面是单词，后面是单词释义。我使用ㅋ作为分隔符的原因是它是一个韩文字符，不会出现在牛津这本词典中。 选择模板让我们从失恋的悲伤中走出来，先戴个绿帽子，调一调Css样式表吧～ 嗯。经过长时间的折腾，我还是觉得网页自带的样式表贼好看，便无耻的抄袭下来（手动滑稽 所以我找到了官方的 Css 文件，直接抄袭下来（额 接下来把 Css 文件复制到 Anki Card Types 看看效果 再补一张效果图： 调整细节根据上面的尝试，我们已经发现了诸多问题。于是我们先把图片下载下来。图片很隐蔽，藏在Css文件里。我们先通过复制粘贴的办法分别将oxford.css interface.css card.css搞下来。什么，你不知道怎么复杂？哎呀，我没有说，你看到我上面几张图拿方框圈起来的部分了吗？该点击的点击，该复制的复制，该粘贴的粘贴。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475# a3_get_images_in_css_file.pyimport osimport reimport shutilimport requestsproxies = &#123;'http': 'http://127.0.0.1:1087', 'https': 'http://127.0.0.1:1087'&#125;cookies = &#123;'oup-cookie': 'true', 'JSESSIONID': '9A3D476A9725353A4CDDD5D5D0E1841B', '__qca': 'P0-918953595-1500593442598', 'dictionary': 'english', '_ga': 'GA1.2.448180626.1500593443', '_gid': 'GA1.2.928219780.1500593443' &#125;headers = &#123;'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/55.0.2883.95 Safari/537.36'&#125;def get_css(*args, download: bool): # which_css.css for which_css in args: print(which_css) \"\"\"Step 1: Get resource list and Covert href-links to Anki's style\"\"\" with open(which_css, 'r', encoding='utf-8') as file: css = file.read() # Use Regex to get Images List files = re.findall(r'url\\(\"?../images/(.*?)\"?\\)', css) print(len(files)) prefix = '_us-oxford-learners-dict-images-' # Use char '_' and Fucking Anki! \"\"\" https://apps.ankiweb.net/docs/manual.html#media-&amp;-latex-references Anki Docs: The underscore tells Anki that the file is used by the template and it should be exported when sharing the deck. \"\"\" def repl(match_obj): # You can use lambda here. print(match_obj) return 'url(\"' + prefix + match_obj[1].replace('/', '-').replace('_', '-') + '\")' # Replace css file's image link with Anki Style css = re.sub(r'url\\(\"?../images/(.*?)\"?\\)', repl, css) if not os.path.exists('collection.media'): os.mkdir('collection.media') '''Step 2: Downloads all images ''' for i in files: url = 'http://www.oxfordlearnersdictionaries.com/us/external/images/' + i name = prefix + i.replace('/', '-').replace('_', '-') print(name + '\\t' + url) if download: # downloading... r = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers, stream=True) if r.status_code == 200: with open('collection.media/' + name, 'wb') as file: r.raw.decode_content = True shutil.copyfileobj(r.raw, file) '''Step 3: Save new css-style file to \"a/which_css.css\" ''' with open('a/' + which_css, 'w+', encoding='utf-8') as file: file.write(css)def copy_collection_media_to(dst: str): src = 'collection.media' # shutil.copytree(src=src, dst=dst) for file in os.listdir(src): file_name = os.path.join(src, file) if os.path.isfile(file_name): shutil.copy2(src=file_name, dst=dst)if __name__ == '__main__': get_css('oxford.css', download=True) get_css('interface.css', download=True) # get_css('oxford.css', 'interface.css', download=False) # update css file after you modify the css file copy_collection_media_to('a') 下载完图片之后，接下来我们要对字体动手了。同样的方法，不多讲。你只需要注意的是，字体文件的链接藏在interface.css文件的前几行。 123456789101112131415161718# interface.css@import url(https://fonts.googleapis.com/css?family=Merriweather:700,700italic,300,300italic|Open+Sans:400,600,400italic,600italic);/*------------------------------------*\\ GLOBAL STYLES\\*------------------------------------*/fonts@font-face &#123; font-family: 'oup-icons'; src: url(\"../fonts/oup-icons.eot\"); src: url(\"../fonts/oup-icons.eot?#iefix\") format('embedded-opentype'), url(\"../fonts/oup-icons.ttf\") format('truetype'), url(\"../fonts/oup-icons.woff\") format('woff'), url(\"../fonts/oup-icons.svg#oup-icons\") format('svg'); font-weight: normal; font-style: normal;&#125; 下载字体的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# a4_get_font_of_interface_css.pyimport osimport reimport shutilimport requestsproxies = &#123;'http': 'http://127.0.0.1:1087', 'https': 'http://127.0.0.1:1087'&#125;headers = &#123;'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/55.0.2883.95 Safari/537.36'&#125;def get_font(download: bool): \"\"\"Step 1: Get resource list and Covert href-links to Anki's style\"\"\" with open('a/interface.css', 'r', encoding='utf-8') as file: interface = file.read() url = re.findall(r'@import url\\((.*?)\\);', interface)[0] r = requests.get(url=url, proxies=proxies, headers=headers) files = re.findall(r'url\\(\"?(.*?)\"?\\)', r.text) prefix = '_us-oxford-learners-dict-fonts-' # Use char '_' and Fucking Anki! \"\"\" https://apps.ankiweb.net/docs/manual.html#media-&amp;-latex-references Anki Docs: The underscore tells Anki that the file is used by the template and it should be exported when sharing the deck. \"\"\" def repl(match_obj): # You can use lambda here. print(match_obj) return 'url(\"' + prefix + match_obj[1].replace('https://fonts.gstatic.com/s/', '').replace('/', '-').replace('_', '-') + '\")' font = re.sub(r'url\\(\"?(.*?)\"?\\)', repl, r.text) if not os.path.exists('collection.media'): os.mkdir('collection.media') '''Step 2: Downloads all fonts ''' for i in files: url = i name = prefix + i.replace('https://fonts.gstatic.com/s/', '').replace('/', '-').replace('_', '-') print(name + '\\t' + url) if download: # downloading... r = requests.get(url=url, proxies=proxies, headers=headers, stream=True) if r.status_code == 200: with open('collection.media/' + name, 'wb') as file: r.raw.decode_content = True shutil.copyfileobj(r.raw, file) '''Step 3: Save new css-style file to \"a/which_css.css\" ''' interface = font + '.icon-tick:before &#123;' + interface.split('.icon-tick:before &#123;')[1] with open('a/interface.css', 'w+', encoding='utf-8') as file: file.write(interface)if __name__ == '__main__': # get_font(download=False) get_font(download=True) 下载完字体后，我们对三个Css文件进行合并，最终的样式表文件就叫z_oxford.css吧。 1234567891011121314# a5_merge_three_css.pywith open('a/interface.css', 'r', encoding='utf-8') as file: interface = file.read()with open('a/oxford.css', 'r', encoding='utf-8') as file: oxford = file.read()with open('card.css', 'r', encoding='utf-8') as file: card = file.read()with open('z_oxford.css', 'w+', encoding='utf-8') as file: file.write(card) file.write(interface) file.write(oxford) 样式表算是做完了，就差声音了。在下面这个脚本中，我也对卡片样式进行了微调，调整对部分在看代码注释就行了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104# a6_get_audio_ogg.pyimport osimport shutilimport requestsfrom bs4 import BeautifulSoupfrom a3_get_images_in_css_file import copy_collection_media_toproxies = &#123;'http': 'http://127.0.0.1:1087', 'https': 'http://127.0.0.1:1087'&#125;cookies = &#123;'oup-cookie': 'true', 'JSESSIONID': '9A3D476A9725353A4CDDD5D5D0E1841B', '__qca': 'P0-918953595-1500593442598', 'dictionary': 'english', '_ga': 'GA1.2.448180626.1500593443', '_gid': 'GA1.2.928219780.1500593443' &#125;headers = &#123;'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/55.0.2883.95 Safari/537.36'&#125;def get_audio(file_name: str): print('Getting Audio:') with open(file_name, 'r', encoding='utf-8') as file: oxford_3000_html = file.readlines() prefix = 'us-oxford-learners-dict-audio-' # Don't use char '_' and Fucking Anki! os.remove('z_oxford.txt') for i in oxford_3000_html: soup = BeautifulSoup(i.split('ㅋ')[1].replace('\\n', ''), \"html5lib\") sound = soup.find_all('div', class_='audio_play_button') count = 0 srcs = [] for j in sound: '''A Card may have more than one Audio''' # print(j) # mp3 = j.get('data-src-mp3') ogg = j.get('data-src-ogg') id_ = 'audio' + str(count) src = prefix + ogg.split('/')[-1:][0].replace('/', '-').replace('_', '-') srcs.extend([src]) onclick = \"document.getElementById('\" + id_ + \"').play()\" '''Add &lt;button&gt; Tag''' a = soup.new_tag('a', onclick=onclick, style=j.get('style'), title=j.get('title'), valign=j.get('valign')) a['class'] = j.get('class') j.insert_after(a) '''Add &lt;audio&gt; Tag''' j.name = 'audio' del j['class'] del j['style'] del j['title'] del j['valign'] del j['data-src-mp3'] del j['data-src-ogg'] j['id'] = id_ j['src'] = src '''Writing Download List to TXT File''' # print(','.join([src, mp3, ogg])) print(','.join([src, ogg])) with open('oxford_3000_&lt;audio&gt;.txt', 'a+') as file: file.write(','.join([src, ogg])) file.write('\\n') count += 1 '''Fix some bugs on html and Fucking Anki's \"JS\" \"Support\" ''' headings = soup.select('span[class=\"heading\"]') for heading in headings: heading['onclick'] = \"this.parentElement.classList.toggle('is-active');\" '''Writing Anki Cards which were changed for Card's Audio''' # print(soup) with open('z_oxford.txt', 'a+', encoding='utf-8') as file: file.write('ㅋ'.join([str(soup.select('div[class=\"top-container\"]')[0]), str(soup.select('body')[0])])) file.write('ㅋ') for k in srcs: file.write('[sound:' + k + ']') file.write('\\n')def download_all_audio(): with open('oxford_3000_&lt;audio&gt;.txt', 'r') as file: files = file.readlines() for i in files: url = i.split(',')[1].replace('\\n', '') name = i.split(',')[0] print(name + '\\t' + url) r = requests.get(url=url, proxies=proxies, cookies=cookies, headers=headers, stream=True) if r.status_code == 200: with open('collection.media/' + name, 'wb') as file: r.raw.decode_content = True shutil.copyfileobj(r.raw, file)if __name__ == '__main__': get_audio('oxford_3000_html.txt') download_all_audio() # copy_collection_media_to('a') copy_collection_media_to('/Users/acbetter/Library/Application Support/Anki2/User 1/collection.media') 在这个过程中，我们顺便生成了音频下载的列表： 1234# oxford_3000_&lt;audio&gt;.txtus-oxford-learners-dict-images-a--us-2-rr.ogg,http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron_ogg/a/a__/a__us/a__us_2_rr.oggus-oxford-learners-dict-images-a--us-3-rr.ogg,http://www.oxfordlearnersdictionaries.com/us/media/american_english/us_pron_ogg/a/a__/a__us/a__us_3_rr.ogg... 也生成了最终要导入到 Anki 的文件：z_oxford.txt 1234# z_oxford.txt单词1ㅋ单词1释义ㅋ单词1音频单词2ㅋ单词2释义ㅋ单词2音频... 同时也把所有资源文件下载到collection.media文件夹。如果你用的是Mac的话，这些资源也顺便复制到了 Anki 目录下。 导入到 Anki像其他词库一样照常导入就行了。注意：我用的分隔符是ㅋ。 完结！撒花～ 170729 by acbetter","link":"/2017/07/22/如何动手打造属于自己的ANKI牌组（编程向）之牛津基本三千词/"},{"title":"如何打造一台高生产力的 macOS","text":"在中国买的 Mac 界面是中文，这让我很不习惯。虽然在设置可以调界面成英文，但是一些文件夹还是中文名称。我强迫症就犯了，重启，Command+R 按着不放，抹掉磁盘，重装系统。选国家的时候选美国，一路下一步就好了～ 软件配置123456789101112131415161718192021brew tap homebrew/caskbrew cask install qqbrew cask install google-chromebrew cask install iinabrew cask install fluxbrew cask install dropboxbrew install python3brew install masmas lucky wechatbrew install qtmas lucky 'the unarchiver'brew cask install macpassmas lucky qq音乐mas install 944848654 # 网易云音乐brew cask install dashmas lucky snappybrew cask install jitouchbrew install aria2brew cask install telegrambrew cask install notionbrew install nodejs 12Contexts直接安装官方版本的3，然后改配置文件可以进行无限试用。 无限试用方法：打开/Users/用户名/Library/Application Support/下的/.com.contextsformac.Contexts文件(隐藏文件)，将CTStartDate2改大，比如2099年，然后就可以一直试用了。 Shadowsocks-NG 上网冲浪必备 Google Chrome 虽然和 Safari 速度差不多 但是插件多好用 WeChat, QQ, Neteasy Music, IINA 娱乐套件必不可少 Typora Markdown 文本编辑器 支持 $\\LaTeX$ 预览 Dash for macOS 代码文档查看器 写代码必备神器 我根本离不开手 Visual Studio Code 不错的文本编辑器，只可惜由于某些历史遗留 Bug 我已经不再使用 终端配置 关闭 SIP 命令 12sudo spctl --master-disabledefaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder macOS Finder 显示隐藏文件和文件夹 1defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder 大家好像更喜欢把”终端 Terminal“叫做”命令行“…… 不管这些了 直接开搞 Homebrew 方便的包管理器 各种一键安装 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Oh My Zsh 配置 Zsh 的最佳神器 提升逼格 1sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" 先在 Themes 及 External themes 上选一款 Zsh 主题 然后配置 我选择的是 xxf 在此记录一下配置过程 1vi ~/.zshrc 把 ZSH_THEME=&quot;xxxx&quot; 这一行中 xxxx 换成你想要的主题名字就好 重启一下 Terminal 就可以看到效果了 如果没有的话 说明你想要的主题不在自带主题里 这时候就要手动添加主题 1vi ~/.oh-my-zsh/themes/your-theme-name.zsh-theme 把你主题的内容 Copy 进去就行了 同时也要记得改 ZSH_THEME=&quot;your-theme-name&quot; 再打开 Terminal.app 点击Terminal -&gt; Preferencesor ⌘+, 如图进行主题配置 （刚刚我们只是配置了文字颜色～ 大功告成！ 这只是笔者喜欢的配色方案 其实优秀的配色方案真的很多很多 请大家自行配置 什么 Python, Java 之类的 安装很简单 不再多讲 注意：macOS 无需配置 Java 环境变量 开袋即食 安装 Ruby 最新版本12brew install rubybrew link --overwrite ruby 细节调整 由于我使用快捷键⌘+Space打开Spotlight Search 所以无需在菜单栏中显示搜索图标 可参照教程去掉搜索图标 补效果图 配置终端走代理（传说中的所有软件上小飞机） 如图所示把命令拷贝到剪贴板上 然后打开终端输入以下命令 1vi ~/.bashrc 然后另起一行 粘贴你复制的export http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;进去 Shift+: wq↵ 保存 然后激活文件即可 1source ~/.bashrc PS: 一键切换代理模式的快捷键在设置里面有 自行设置一个键位就好 注意：如果你和笔者一样 用的是 zsh 那么请你 vi ~/.zshrc 如果你希望launchpad第一屏只有苹果自带应用 而且每一屏都按照字母顺序排列应用的话 可以键入以下命令 1defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock Alfred - Productivity App for Mac OS X 神器 可以完全替代 Spotlight 妈妈再也不用担心我 Spotlight 不好用了 这个神器最大的功能就是 WorkFlow 了 全键盘党福利 什么快速查快递无需先打开浏览器-搜索查快递网站-查询 直接敲几个字母就可以解决的事情 更多的可以查看 hzlzh/AlfredWorkflow.com 下载别人配置好的工作流 另附上网页云控制工作流 EricWen229/AlfredWorkflows 如果 Alfred 一直要求通讯录权限 那么输入以下命令就好 1sudo codesign --force --deep --sign - \"/Applications/Alfred 3.app/Contents/Frameworks/Alfred Framework.framework/Versions/A/Alfred Framework\" 远程 SSH 连接服务器 防止自动掉线 123456789# 编辑配置文件vi ~/.ssh/config# 添加, 60s向服务端请求一次ServerAliveInterval = 60# 保存 并 退出编辑器# 设置文件权限chmod 600 ~/.ssh/config 刷新 DNS 缓存 1sudo killall -HUP mDNSResponder 或者稍微配置一下 123vi ~/.bash_profile# Add this line to .bash_profilealias kdns='sudo killall -HUP mDNSResponder' 经过这样的小小配置 就可以在命令行中敲打kdns然后输入密码 即可达到清理缓存的目的 是不是很方便呢？ 注意：如果你和笔者一样 用的是 zsh 那么请你 vi ~/.zshrc 备份到 Dropbox 鼠须管 在installation.yaml文件中添加一行sync_dir: &quot;/Users/acbetter/Dropbox/appref/RimeSync&quot; Alfred 3 在Preferences -&gt; Advanced -&gt; Set sync folder选择你的 Dropbox 文件夹 如 /Users/acbetter/Dropbox/appref/Alfread3Sync 连接 Alfred 与 Dash 在 Dash 中按照下图操作即可 配置好的效果如图 这样就可以直接在 Alfred 中查文档了 当你使用 Caps Lock 大写锁定键 作中英文切换之用 而且你在使用 JetBrain 系列的 IDE 比如 Intellij Idea, PyCharm 之类的 你会进退两难 要么输入大写字母 要么输入汉字 就是无法输入小写字母 很气很难受 OS X 10.12+ Karabiner OS X 10.12- Seil 将 Caps Lock 大写锁定键 换成 F18(key value: 80) 并作为切换输入源快捷键即可 在一番研究后发现是非 MAC APP STORE 版网易云音乐或没有关闭 “使用 macOS 媒体键” 的 IINA 都会导致 Caps Lock 键行为异常，以上内容已经过时，详见讨论 2017mbp MacOS Sierra 10.12.6 自带输入法切换故障， 疑似 bug report？ 一行代码修复 Homebrew 各种奇奇怪怪的问题。 1sudo chown -R $(whoami) $(brew --prefix)/* 调输入法 注意：调输入法这一过程极为繁琐 如果是刚刚拿到 macOS 的萌新 强烈推荐下载商业化输入法或使用自带输入法 笔者花了一个下午的时间配置完成 日后也在不断调教 现在打字非常舒服 如果你认为你自己的输入法挺好的 那就千万不要像笔者一样折腾 否则得不偿失 安装 Squirrel 鼠鬚管 RIME | 中州韻輸入法引擎 输入法 笔者试过各种各样的 macOS 输入法 包括但不仅限于：自带、搜狗、百度、手心…… 总感觉不是很顺手 而且 输入法这东西 有开源的就不要用闭源的了 国内的大公司 开启了云服务的输入法真的不安全 更容易被监控到个人的隐私 配置文档可以参考 「鼠鬚管」的调教笔记 及 官方文档 解决字体缺失问题 安装 明朝字体 笔者百度云备份 把候选词个数调整为 9 123456789# File: default.custom.yaml# Rime default settings - acbetter# encoding: utf-8patch: \"menu/page_size\": 9 schema_list: - schema: luna_pinyin_simp - schema: luna_pinyin_tw 扩充词库 我们用的词库是 IceHe/dictionaries 下载链接 下载完成后解压缩并将 luna_pinyin.dict中的文件复制到Rime目录 如果用明月拼音·简化字则需要把luna_pinyin.custom.yaml重命名为luna_pinyin_simp.custom.yaml 解决 Emoji 输入问题 使用表情词典 把luna_pinyin.extended.dict.yaml前面的部分 修改成下面的形式 并且把 lembacon/luna_pinyin.emoji.dict.yaml 的内容复制到luna_pinyin.emoji.dict.yaml里 1234567891011121314151617181920212223# Rime dictionary# encoding: utf-8# Luna Pinyin Extended Dictionary(Basic) - 明月拼音擴充詞庫（基本）# 部署位置：# ~/.config/ibus/rime (Linux)# ~/Library/Rime (Mac OS)# %APPDATA%\\Rime (Windows)---name: luna_pinyin.extendedversion: \"2015.12.02\"sort: by_weightuse_preset_vocabulary: true# 此處爲明月拼音擴充詞庫（基本）默認鏈接載入的詞庫，有朙月拼音官方詞庫、明月拼音擴充詞庫（漢語大詞典）、明月拼音擴充詞庫（詩詞）、明月拼音擴充詞庫（含西文的詞彙）。如果不需要加載某个詞庫請將其用「#」註釋掉。# 雙拼不支持 luna_pinyin.cn_en 詞庫，請用戶手動禁用。import_tables: - luna_pinyin - luna_pinyin.emoji - luna_pinyin.hanyu - luna_pinyin.poetry - luna_pinyin.cn_en # - luna_pinyin.kaomoji # - luna_pinyin.sgmain... 输入法配色方案我是在 @scomper 的基础上修改的 主要增大了候选字词大小和候选编号大小 123456789101112131415161718192021222324252627# Squirrel settings - acbetter# encoding: utf-8patch: show_notifications_when: appropriate # 状态通知，适当(appropriate)，开（always）关（never） style: color_scheme: apathy preset_color_schemes: apathy: name: \"冷漠 / Apathy\" author: \"LIANG Hai \" horizontal: true # 水平排列 inline_preedit: true #单行显示，false双行显示 candidate_format: \"%c\\u2005%@\\u2005\" # 编号 %c 和候选词 %@ 前后的空间 corner_radius: 5 #候选条圆角 border_height: 0 border_width: 0 back_color: 0xFFFFFF #候选条背景色 font_face: \"PingFangSC-Regular,HanaMinB\" #候选词字体 font_point: 18 #候选字词大小 text_color: 0x424242 #高亮选中词颜色 label_font_face: \"STHeitiSC-Light\" #候选词编号字体 label_font_point: 16 #候选编号大小 hilited_candidate_text_color: 0xEE6E00 #候选文字颜色 hilited_candidate_back_color: 0xFFF0E4 #候选文字背景色 comment_text_color: 0x999999 #拼音等提示文字颜色 贴个效果图～ 调整输入细节 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109# File: luna_pinyin_simp.custom.yaml# Rime schema - acbetter# encoding: utf-8patch: # 載入朙月拼音擴充詞庫 \"translator/dictionary\": luna_pinyin.extended # 改寫拼寫運算，使得含西文的詞彙（位於 luna_pinyin.cn_en.dict.yaml 中）不影響簡拼功能（注意，此功能只適用於朙月拼音系列方案，不適用於各類雙拼方案） # 本條補靪只在「小狼毫 0.9.30」、「鼠鬚管 0.9.25 」、「Rime-1.2」及更高的版本中起作用。 \"speller/algebra/@before 0\": xform/^([b-df-hj-np-tv-z])$/$1_/ # 默认为英文输入 switches: - name: ascii_mode reset: 1 states: [\"中文\", \"英文\"] - name: full_shape reset: 0 states: [\"半角\", \"全角\"] - name: zh_simp reset: 1 states: [\"漢字\", \"汉字\"] - name: ascii_punct states: [\"。，\", \"．,\" ] - options: [utf8, gbk, gb2312] # (※2) 字符集选单 reset: 1 # 默认 GBK states: - UTF-8 - GBK - GB2312 # 简化器 过滤器 生僻字处理 simplifier: option_name: zh_simp engine/filters: - simplifier - uniquifier - charset_filter@gbk # (※3) GBK 过滤 注意：非 GBK 字符无法显示在候选框内 # 符号快速输入 punctuator: import_preset: symbols symbols: \"/fs\": [½, ‰, ¼, ⅓, ⅔, ¾, ⅒ ] \"/bq\": [😂️, 😅️, ☺️, 😱️, 😭️, 😇️, 🙃️, 🤔️, 💊️, 💯️, 👍️, 🙈️, 💩️, 😈️ ] \"/dn\": [⌘, ⌥, ⇧, ⌃, ⎋, ⇪, , ⌫, ⌦, ↩︎, ⏎, ↑, ↓, ←, →, ↖, ↘, ⇟, ⇞] \"/fh\": [ ©, ®, ℗, ℠, ™, ℡, ␡, ♂, ♀, ☉, ☊, ☋, ☌, ☍, ☐, ☑︎, ☒, ☜, ☝, ☞, ☟, ✎, ✄, ♲, ♻, ⚐, ⚑, ⚠] \"/xh\": [ ＊, ×, ✱, ★, ☆, ✩, ✧, ❋, ❊, ❉, ❈, ❅, ✿, ✲] \"/py\": [ ā, á, ǎ, à, ō, ó, ǒ, ò, ê, ê̄, ế, ê̌, ề, ē, é, ě, è, ī, í, ǐ, ì, ū, ú, ǔ, ù, ü, ǖ, ǘ, ǚ, ǜ, ḿ, m̀, ń, ň, ǹ, ẑ, ĉ, ŝ, ŋ ] \"/pyd\": [ Ā, Á, Ǎ, À, Ō, Ó, Ǒ, Ò, Ê, Ê̄, Ế, Ê̌, Ề, Ē, É, Ě, È, Ī, Í, Ǐ, Ì, Ū, Ú, Ǔ, Ù, Ü, Ǖ, Ǘ, Ǚ, Ǜ, Ḿ, M̀, Ń, Ň, Ǹ, Ẑ, Ĉ, Ŝ, Ŋ ] # 模糊拼音 \"speller/algebra\": - erase/^xx$/ # 第一行保留 # 模糊音定義 # 需要哪組就刪去行首的 # 號，單雙向任選 #- derive/^([zcs])h/$1/ # zh, ch, sh =&gt; z, c, s #- derive/^([zcs])([^h])/$1h$2/ # z, c, s =&gt; zh, ch, sh #- derive/^n/l/ # n =&gt; l #- derive/^l/n/ # l =&gt; n # 這兩組一般是單向的 #- derive/^r/l/ # r =&gt; l #- derive/^ren/yin/ # ren =&gt; yin, reng =&gt; ying #- derive/^r/y/ # r =&gt; y # 下面 hu &lt;=&gt; f 這組寫法複雜一些，分情況討論 #- derive/^hu$/fu/ # hu =&gt; fu #- derive/^hong$/feng/ # hong =&gt; feng #- derive/^hu([in])$/fe$1/ # hui =&gt; fei, hun =&gt; fen #- derive/^hu([ao])/f$1/ # hua =&gt; fa, ... #- derive/^fu$/hu/ # fu =&gt; hu #- derive/^feng$/hong/ # feng =&gt; hong #- derive/^fe([in])$/hu$1/ # fei =&gt; hui, fen =&gt; hun #- derive/^f([ao])/hu$1/ # fa =&gt; hua, ... # 韻母部份 #- derive/^([bpmf])eng$/$1ong/ # meng = mong, ... #- derive/([ei])n$/$1ng/ # en =&gt; eng, in =&gt; ing #- derive/([ei])ng$/$1n/ # eng =&gt; en, ing =&gt; in # 樣例足夠了，其他請自己總結…… # 模糊音定義先於簡拼定義，方可令簡拼支持以上模糊音 - abbrev/^([a-z]).+$/$1/ # 簡拼（首字母） - abbrev/^([zcs]h).+$/$1/ # 簡拼（zh, ch, sh） # 以下是一組容錯拼寫，《漢語拼音》方案以前者爲正 - derive/^([nl])ve$/$1ue/ # nve = nue, lve = lue - derive/^([jqxy])u/$1v/ # ju = jv, - derive/un$/uen/ # gun = guen, - derive/ui$/uei/ # gui = guei, - derive/iu$/iou/ # jiu = jiou, # 自動糾正一些常見的按鍵錯誤 - derive/([aeiou])ng$/$1gn/ # dagn =&gt; dang - derive/([dtngkhrzcs])o(u|ng)$/$1o/ # zho =&gt; zhong|zhou - derive/ong$/on/ # zhonguo =&gt; zhong guo - derive/ao$/oa/ # hoa =&gt; hao - derive/ua$/au/ # shau =&gt; shua - derive/([iu])a(o|ng?)$/a$1$2/ # tain =&gt; tian # 分尖團後 v =&gt; ü 的改寫條件也要相應地擴充： # 'translator/preedit_format': # - \"xform/([nljqxyzcs])v/$1ü/\" 补效果图～ 更厉害的是 连常用的按键顺序错了也无需担心","link":"/2017/07/13/如何打造一台高生产力的 macOS/"},{"title":"概率论与数理统计备忘录","text":"本文记录了六种常见概率分布，以及部分数理统计的基本概念。 六种常见概率分布两点分布若随机变量 $X$ 只可能取 $x_1$ 与 $x_2$ 两值，它的分布律为$$P{X=x_1}=1-p\\quad(0&lt;p&lt;1), \\P{X=x_2}=p,$$则称 $X$ 服从参赛为 $p$ 的两点分布. 特别的，当 $x_1=0,x_2=1$ 时，两点分布也叫 $(0-1)$ 分布，记作 $X~(0-1)$ 分布. 二项分布若随机变量 $X$ 的分布律为$$P{X=k}=C^k_np^k(1-p)^{n-k},\\quad k=0,1,\\dots,n,$$则称 $X$ 服从参数为 $n,p$ 的二项分布 (binomial distribution)，记作 $X\\sim b(n,p)$. 泊松分布若随机变量 $X$ 的分布律为$$P{X=k}=\\frac{\\lambda ^ke^{-\\lambda}}{k!},\\quad k=0,1,2,\\dots,$$其中 $\\lambda &gt;0$ 是常数，则称 $X$ 服从参数为 $\\lambda$ 的泊松分布 (poisson distribution)，记为 $X\\sim P(\\lambda)$. 均匀分布若连续型随机变量 $X$ 具有概率密度$$f(x)=\\begin{cases}\\frac{1}{b-a},&amp; a&lt;x&lt;b,\\0,&amp; 其他,\\end{cases} \\$$则称 $X$ 在区间 $(a,b)$ 上服从均匀分布 (uniform distribution)，记为 $X\\sim U(a,b)$. 指数分布若随机变量 X 的密度函数为$$f(x)=\\begin{cases}\\lambda e^{-\\lambda x},&amp; x&gt;0,\\0,&amp; x\\ge0,\\end{cases}$$其中 $\\lambda&gt;0$ 为常数，则称 $X$ 服从参数为 $\\lambda$ 的指数分布 (exponential distribution) ，记作 $X\\sim E(\\lambda)$. 正态分布若连续型随机变量 $X$ 的概率密度为$$f(x)=\\frac{1}{\\sqrt{2\\pi\\sigma}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}, -\\infty&lt;x&lt;+\\infty,$$其中 $\\mu$,$\\sigma(\\sigma&gt;0)$ 为常数，则称 $X$ 服从参数为 $\\mu$,$\\sigma$ 的正态分布 (normal distribution) ，记为 $X\\sim N(\\mu,\\sigma^2)$. 公式总结 概率分布 记法 分布函数 数学期望 方差 两点分布：$(0-1)$ $X~(0-1)$ 略 $p$ $p(1-p)$ 二项分布／伯努利分布 $X\\sim b(n,p)$ 略 $np$ $np(1-p)$ 泊松分布 $X\\sim P(\\lambda)$ 略 $\\lambda$ $\\lambda$ 均匀分布 $X\\sim U(a,b)$ $F(x)=\\begin{cases}0,&amp;x&lt;a,\\\\frac{x-a}{b-a},&amp;a\\le x&lt;b,\\1,&amp;x\\ge b.\\end{cases}$ $\\frac{a+b}{2}$ $\\frac{(b-a)^2}{12}$ 指数分布 $X\\sim E(\\lambda)$ $F(x)=\\begin{cases}1-e^{-\\lambda x},&amp;x&gt;0,\\0,&amp;x\\le0.\\end{cases}$ $\\frac{1}{\\lambda}$ $\\frac{1}{\\lambda^2}$ 正态分布 $X\\sim N(\\mu,\\sigma^2)$ $F(x)=\\frac{1}{\\sqrt{2\\pi\\sigma}}\\int_{-\\infty}^x e^{-\\frac{(t-\\mu)^2}{2\\sigma^2}}dt$ $\\mu$ $\\sigma^2$ 大数定律与中心极限定理TODO 数理统计基本概念随机样本样本平均值$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$样本方差（无偏估计）$$S^2=\\frac{1}{n-1}\\sum_{i=1}^n{X_i-\\bar{X}}^2=\\frac{1}{n-1}(\\sum_{i=1}^{n}X_i^2-n\\bar{X^2})$$样本方差（有偏估计）$${S^*}^2=\\frac{1}{n}\\sum_{i=1}^n{X_i-\\bar{X}}^2$$ 抽样估计卡方分布设 $X_1,X_2,\\dots,X_n$ 是来自总体 $N(0,1)$ 的样本，则统计量$$\\chi^2=X_1^2+X_1^2+\\dots+X_n^2$$所服从的分布称为自由度为 $n$ 的 $\\chi^2$ 分布 ($\\chi^2$ - distribution) ，记为 $\\chi^2\\sim\\chi^2(n)$. $\\chi^2(n)$ 分布的概率密度函数为$$f_n(y)=\\begin{cases}{\\frac{1}{2^{n/2}\\Gamma(n/2)}}y^{n/2-1}e^{-y/2},&amp;y&gt;0,\\0,&amp; other,\\end{cases}$$其中，伽玛函数（Gamma函数）$\\Gamma(z) = \\int_{0}^{\\infty} \\frac{t^{z-1}}{\\mathrm{e}^t} \\,{\\rm{d}}t$ $\\chi^2$ 分布具有以下性质： 如果 $\\chi_1^2\\sim\\chi^2(n_1)$ , $\\chi_2^2\\sim\\chi^2(n_2)$ ，且它们相互独立，则有 $\\chi_1^2+\\chi_2^2\\sim\\chi^2(n_1+n_2)$. 这一性质称为 $\\chi^2$ 分布的可加性. 如果 $\\chi^2\\sim\\chi^2(n)$ , 则有 $E(\\chi^2)=n$ , $D(\\chi^2)=2n$. 学生t-分布设 $X\\sim N(0,1),Y\\sim\\chi^2(n)$ ，并且 $X , Y$ 相互独立，则称随机变量$$t=\\frac{X}{\\sqrt{Y/n}}$$服从自由度为 $n$ 的 $t$ 分布 (t-distribution) ，记为 $t\\sim t(n)$. F-分布设 $U\\sim\\chi^2(n_1),V\\sim\\chi^2(n_2)$ ，且 $U,V$ 独立，则称随机变量$$F = \\frac{U/n_1}{V/n_2}$$服从自由度为 $(n_1,n_2)$ 的 $F$ 分布 (F-distribution)，记为 $F\\sim F(n_1,n_2)$. 正态总体的样本均值与样本方差的分布设正态总体的均值为 $\\mu$ ，方差为 $\\sigma^2,X_1,X_2,\\dots,X_n$ 是来自正态总体 $X$ 的一个简单样本，则总有$$E(\\bar{X})=\\mu,D(\\bar{X})=\\sigma^2/n,\\bar{X}\\sim N(\\mu,\\sigma^2/n).$$对于正态总体 $N(\\mu,\\sigma^2)$ 的样本方差 $S^2$ ，我们有以下的性质（定理）. 设 $X_1,X_2,\\dots,X_n$ 是总体 $N(\\mu,\\sigma^2)$ 的样本，$\\bar{X},S^2$ 分别是样本均值和样本方差，则有 $\\frac{(n-1)S^2}{\\sigma^2}\\sim\\chi^2(n-1)$ ; $\\bar{X}$ 与 $S^2$ 相互独立. $\\frac{\\bar{X}-\\mu}{S/\\sqrt{n}}\\sim t(n-1)$ 设 $X_1,X_2,\\dots,X_{n_1}$ 与 $Y_1,Y_2,\\dots,Y_{n_2}$ 分别是来自具有相同方差的两正态总体 $N(\\mu_1,\\sigma^2),N(\\mu_2,\\sigma^2)$ 的样本，且这两个样本相互独立. 设 $\\bar{X}=\\frac{1}{n_1}\\sum_{i=1}^{n_1}{X_i},\\bar{Y}=\\frac{1}{n_2}\\sum_{i=1}^{n_2}{Y_i}$ 分别是这两个样本的均值，$S_1^2=\\frac{1}{n_1-1}\\sum_{i=1}^{n_1}({X_i-\\bar{X})^2},S_2^2=\\frac{1}{n_2-1}\\sum_{i=1}^{n_2}({Y_i-\\bar{Y})^2}$ 分别是这两个样本的样本方差，则有$$\\frac{(\\bar{X}-\\bar{Y})-(u_1-u_2)}{S_\\omega\\sqrt{1/n_1+1/n_2}}\\sim t(n_1+n_2-2),$$其中 $S_\\omega^2=\\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}$.","link":"/2017/04/08/概率论与数理统计备忘录/"}],"tags":[{"name":"感想","slug":"感想","link":"/tags/感想/"},{"name":"思考","slug":"思考","link":"/tags/思考/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"教程","slug":"教程","link":"/tags/教程/"},{"name":"Anki","slug":"Anki","link":"/tags/Anki/"}],"categories":[{"name":"随笔","slug":"随笔","link":"/categories/随笔/"},{"name":"折腾","slug":"折腾","link":"/categories/折腾/"}]}